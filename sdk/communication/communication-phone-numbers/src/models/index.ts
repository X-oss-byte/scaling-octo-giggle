/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Represents a phone number search request to find phone numbers. Found phone numbers are temporarily held for a following purchase. */
export interface PhoneNumberSearchRequest {
  /** The type of phone numbers to search for, e.g. geographic, or tollFree. */
  phoneNumberType: PhoneNumberType;
  /** The assignment type of the phone numbers to search for. A phone number can be assigned to a person, or to an application. */
  assignmentType: PhoneNumberAssignmentType;
  /** Capabilities of a phone number. */
  capabilities: PhoneNumberCapabilities;
  /** The area code of the desired phone number, e.g. 425. */
  areaCode?: string;
  /** The quantity of desired phone numbers. The default value is 1. */
  quantity?: number;
}

/** Capabilities of a phone number. */
export interface PhoneNumberCapabilities {
  /** Capability value for calling. */
  calling: PhoneNumberCapabilityType;
  /** Capability value for SMS. */
  sms: PhoneNumberCapabilityType;
}

/** The result of a phone number search operation. */
export interface PhoneNumberSearchResult {
  /** The search id. */
  searchId: string;
  /** The phone numbers that are available. Can be fewer than the desired search quantity. */
  phoneNumbers: string[];
  /** The phone number's type, e.g. geographic, or tollFree. */
  phoneNumberType: PhoneNumberType;
  /** Phone number's assignment type. */
  assignmentType: PhoneNumberAssignmentType;
  /** Capabilities of a phone number. */
  capabilities: PhoneNumberCapabilities;
  /** The incurred cost for a single phone number. */
  cost: PhoneNumberCost;
  /** The date that this search result expires and phone numbers are no longer on hold. A search result expires in less than 15min, e.g. 2020-11-19T16:31:49.048Z. */
  searchExpiresBy: Date;
}

/** The incurred cost for a single phone number. */
export interface PhoneNumberCost {
  /** The cost amount. */
  amount: number;
  /** The ISO 4217 currency code for the cost amount, e.g. USD. */
  currencyCode: string;
  /** The frequency with which the cost gets billed. */
  billingFrequency: BillingFrequency;
}

/** The Communication Services error. */
export interface CommunicationErrorResponse {
  /** The Communication Services error. */
  error: CommunicationError;
}

/** The Communication Services error. */
export interface CommunicationError {
  /** The error code. */
  code: string;
  /** The error message. */
  message: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * Further details about specific errors that led to this error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: CommunicationError[];
  /**
   * The inner error if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly innerError?: CommunicationError;
}

/** The phone number search purchase request. */
export interface PhoneNumberPurchaseRequest {
  /** The search id. */
  searchId?: string;
}

export interface PhoneNumberOperation {
  /** The type of operation, e.g. Search */
  operationType: PhoneNumberOperationType;
  /** Status of operation. */
  status: PhoneNumberOperationStatus;
  /** URL for retrieving the result of the operation, if any. */
  resourceLocation?: string;
  /** The date that the operation was created. */
  createdDateTime: Date;
  /** The Communication Services error. */
  error?: CommunicationError;
  /** Id of operation. */
  id: string;
  /**
   * The most recent date that the operation was changed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastActionDateTime?: Date;
}

/** Capabilities of a phone number. */
export interface PhoneNumberCapabilitiesRequest {
  /** Capability value for calling. */
  calling?: PhoneNumberCapabilityType;
  /** Capability value for SMS. */
  sms?: PhoneNumberCapabilityType;
}

/** Represents a purchased phone number. */
export interface PurchasedPhoneNumber {
  /** The id of the phone number, e.g. 11234567890. */
  id: string;
  /** String of the E.164 format of the phone number, e.g. +11234567890. */
  phoneNumber: string;
  /** The ISO 3166-2 code of the phone number's country, e.g. US. */
  countryCode: string;
  /** The phone number's type, e.g. geographic, tollFree. */
  phoneNumberType: PhoneNumberType;
  /** Capabilities of a phone number. */
  capabilities: PhoneNumberCapabilities;
  /** The assignment type of the phone number. A phone number can be assigned to a person, or to an application. */
  assignmentType: PhoneNumberAssignmentType;
  /** The date and time that the phone number was purchased. */
  purchaseDate: Date;
  /** The incurred cost for a single phone number. */
  cost: PhoneNumberCost;
}

/** The list of purchased phone numbers. */
export interface PurchasedPhoneNumbers {
  /** Represents a list of phone numbers. */
  phoneNumbers: PurchasedPhoneNumber[];
  /** Represents the URL link to the next page of phone number results. */
  nextLink?: string;
}

/** A wrapper for a list of short code entities. */
export interface ShortCodeEntities {
  /** List of short codes. */
  shortCodes?: ShortCodeEntity[];
  /** Represents the URL link to the next page */
  nextLink?: string;
}

/** Represents a number, ShortCode or AlphaId, acquired in a given country. */
export interface ShortCodeEntity {
  /** The value of the ShortCode or the alpha numeric e.g. '555555', 'CONTOSO', etc. */
  number?: string;
  /** The type of number e.g. 'ShortCode', 'AlphaId'. */
  numberType?: NumberType;
  /** ISO 3166 2-char code representing the country e.g. 'US'. */
  countryCode?: string;
  /** Program Brief Name. */
  programBriefIds?: string[];
  /** Date in which number was purchased. */
  purchaseDate?: Date;
}

/**
 * A Program Brief provides vital information to the carriers about a messaging program or campaign that would be associated with a short code or alpha sender number in a given country.
 * A Program Brief also provides specifics about the use case, the purpose and the consumer experience receiving the message.
 */
export interface ProgramBriefEntity {
  /** Program Brief Id. */
  id: string;
  /** Program Brief status e.g. 'submitted', 'approved', etc */
  status?: ProgramBriefStatus;
  /** Number provisioned for the Program Brief e.g. 555555, 'CONTOSO' */
  number?: string;
  /**
   * Notes added to the Program Brief after being reviewed to help customer understand
   * review results and necessary follow up actions.
   */
  notes?: Note[];
  /** Represents the costs tied to the number. */
  costs?: ShortCodeCost[];
  /** Date and time when the Program Brief was submitted. */
  submissionDate?: Date;
  /** Last date and time when the Program Brief status was updated. */
  statusUpdatedDate?: Date;
  programDetails?: ProgramDetails;
  companyInformation?: CompanyInformation;
  messageDetails?: MessageDetails;
  trafficDetails?: TrafficDetails;
}

/** Holds a note about a Program Brief that has gone thru stages of review process. */
export interface Note {
  /** Note related to a Program Brief that may imply changes needed from the client. */
  message?: string;
  /** Date and time when the note was added to the Program Brief. */
  date?: Date;
}

/** The incurred cost for a single short code. */
export interface ShortCodeCost {
  /** The cost amount. */
  amount: number;
  /** The ISO 4217 currency code for the cost amount, e.g. USD. */
  currencyCode: string;
  /** The frequency with which the cost gets billed. */
  billingFrequency: BillingFrequency;
}

export interface ProgramDetails {
  /** Set to true if the request is for a vanity number. */
  isVanity?: boolean;
  /**
   * Priority ordered list of preferred vanity numbers.
   * Vanity numbers should be 5 or 6 digit when number type is ShortCode.
   * e.g. 555555, 222222.
   */
  preferredVanityNumbers?: string[];
  /** Type for desired numbers e.g. 'shortCode' or 'alphaId'. */
  numberType?: NumberType;
  /** Indicates whether the number will be used for political campaigns or not. */
  isPoliticalCampaign?: boolean;
  /**
   * A program name that indicates the purpose of filling the Program Brief and how the number will be used for messaging.
   * e.g. 'CONTOSO Shipping'
   */
  name?: string;
  /** Describes how and why the number will be used for messaging as part of the program. */
  description?: string;
  /** URL for the program or company. */
  url?: string;
  /** Indicates how the consumer can sign up to the program e.g. 'website', 'pointOfSale' and/or 'sms'. */
  signUpTypes?: ProgramSignUpType[];
  /**
   * Call to action description for the program.
   * e.g. 'This program will allow for consumers to receive a one-time passcode to validate their
   * authenticity when making a purchase online.  Through a verification process, they will have an
   * option to validate using a passcode sent via SMS, amongst the options. If they choose to have
   * the passcode sent over SMS they will receive this one-time message.  If they chose to opt out,
   * they may select \"STOP\" rather than continuing.'.
   */
  signUp?: string;
  /** URL for program terms of service. */
  termsOfServiceUrl?: string;
  /** URL for privacy policy. */
  privacyPolicyUrl?: string;
  /**
   * Date in which SMS messages will start to be sent out.
   * Should follow ISO 8601 internet format for datetimes.
   * e.g. 2021-08-17T22:02:51.316Z, 2021-08-17T16:39:57-08:00, etc.
   */
  expectedDateOfService?: Date;
}

export interface CompanyInformation {
  /** Legal entity name for customer submitting Program Brief. */
  name?: string;
  /** Company URL for customer submitting Program Brief. */
  url?: string;
  /** Company's address for the customer submitting the Program Brief. */
  address?: string;
  /** Contact Information */
  contactInformation?: ContactInformation;
  /** Customer Care Information */
  customerCareInformation?: CustomerCareInformation;
}

/** Contact Information */
export interface ContactInformation {
  /** Name of authorized user for purposes of submitting the Program Brief. */
  name?: string;
  /** Contact phone number for the authorized user for the customer. Use E164 format. e.g. +14086111111. */
  phone?: string;
  /** Contact email address number for the authorized user for the customer. */
  email?: string;
}

/** Customer Care Information */
export interface CustomerCareInformation {
  /** Customer support phone number for the customer submitting the Program Brief. Use E164 format. e.g. +18005551212 */
  tollFreeNumber?: string;
  /** Customer support email address for the customer submitting the Program Brief. */
  email?: string;
}

export interface MessageDetails {
  /** Applicable message types used in the program e.g. SMS, MMS. */
  types?: MessageType[];
  /** Indicates the nature of the messaging associated with the program e.g. 'subscription', 'transaction'. */
  recurrence?: Recurrence;
  /** Indicates the messaging content types used in the program e.g. 'ringTones', 'smsChat', 'video', 'loyaltyProgramPointsPrizes', 'gifting', 'inApplicationBilling', 'textToScreen', etc. */
  contentTypes?: ContentType[];
  /**
   * Message text for mobile terminated message associated with HELP keyword
   * e.g 'This is the HELP message test.'.
   */
  helpMessage?: string;
  /**
   * "Message text for mobile terminated message associated with STOP keyword
   * e.g. 'This is the STOP message test.'.
   */
  optOutMessage?: string;
  optInMessage?: string;
  /** Keyword used to confirm double Opt-In method e.g. 'JOIN'. */
  optInReply?: string;
  confirmationMessage?: string;
  /** Messaging use case description. */
  useCase?: string;
}

export interface TrafficDetails {
  /** Estimated total messages per month. */
  estimatedVolume?: number;
  /** Estimated number of Mobile-Originated messages likely to be received from a user per month. */
  monthlyAverageMessagesFromUser?: number;
  /** Estimated number of Mobile-Terminated messages likely to be sent per user per month. */
  monthlyAverageMessagesToUser?: number;
  /** Indicates if the nature of the messaging traffic will be bursty. */
  isSpiky?: boolean;
  /**
   * If isSpiky=true, then explain additional details about the traffic pattern
   * e.g. 'Higher traffic expected during holiday season and Black Friday.'.
   */
  spikeDetails?: string;
}

/** A wrapper for a list of ProgramBrief entities. */
export interface ProgramBriefEntities {
  /** List of Program ¨Briefs. */
  programBriefs?: ProgramBriefEntity[];
  /** Represents the URL link to the next page */
  nextLink?: string;
}

/** Defines headers for PhoneNumbers_searchAvailablePhoneNumbers operation. */
export interface PhoneNumbersSearchAvailablePhoneNumbersHeaders {
  /** URL to retrieve the final result after operation completes. */
  location?: string;
  /** URL to query for status of the operation. */
  operationLocation?: string;
  /** The operation id. */
  operationId?: string;
  /** The search operation id. */
  searchId?: string;
}

/** Defines headers for PhoneNumbers_purchasePhoneNumbers operation. */
export interface PhoneNumbersPurchasePhoneNumbersHeaders {
  /** URL to query for status of the operation. */
  operationLocation?: string;
  /** The operation id. */
  operationId?: string;
  /** The purchase operation id. */
  purchaseId?: string;
}

/** Defines headers for PhoneNumbers_getOperation operation. */
export interface PhoneNumbersGetOperationHeaders {
  /** Url to retrieve the final result after operation completes. */
  location?: string;
}

/** Defines headers for PhoneNumbers_updateCapabilities operation. */
export interface PhoneNumbersUpdateCapabilitiesHeaders {
  /** URL to retrieve the final result after operation completes. */
  location?: string;
  /** URL to query for status of the operation. */
  operationLocation?: string;
  /** The operation id. */
  operationId?: string;
  /** The capabilities operation id. */
  capabilitiesId?: string;
}

/** Defines headers for PhoneNumbers_releasePhoneNumber operation. */
export interface PhoneNumbersReleasePhoneNumberHeaders {
  /** URL to query for status of the operation. */
  operationLocation?: string;
  /** The operation id. */
  operationId?: string;
  /** The release operation id. */
  releaseId?: string;
}

/** Known values of {@link PhoneNumberType} that the service accepts. */
export enum KnownPhoneNumberType {
  Geographic = "geographic",
  TollFree = "tollFree"
}

/**
 * Defines values for PhoneNumberType. \
 * {@link KnownPhoneNumberType} can be used interchangeably with PhoneNumberType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **geographic** \
 * **tollFree**
 */
export type PhoneNumberType = string;

/** Known values of {@link PhoneNumberAssignmentType} that the service accepts. */
export enum KnownPhoneNumberAssignmentType {
  Person = "person",
  Application = "application"
}

/**
 * Defines values for PhoneNumberAssignmentType. \
 * {@link KnownPhoneNumberAssignmentType} can be used interchangeably with PhoneNumberAssignmentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **person** \
 * **application**
 */
export type PhoneNumberAssignmentType = string;

/** Known values of {@link PhoneNumberCapabilityType} that the service accepts. */
export enum KnownPhoneNumberCapabilityType {
  None = "none",
  Inbound = "inbound",
  Outbound = "outbound",
  InboundOutbound = "inbound+outbound"
}

/**
 * Defines values for PhoneNumberCapabilityType. \
 * {@link KnownPhoneNumberCapabilityType} can be used interchangeably with PhoneNumberCapabilityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **inbound** \
 * **outbound** \
 * **inbound+outbound**
 */
export type PhoneNumberCapabilityType = string;

/** Known values of {@link BillingFrequency} that the service accepts. */
export enum KnownBillingFrequency {
  Monthly = "monthly",
  Once = "once"
}

/**
 * Defines values for BillingFrequency. \
 * {@link KnownBillingFrequency} can be used interchangeably with BillingFrequency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **monthly** \
 * **once**
 */
export type BillingFrequency = string;

/** Known values of {@link PhoneNumberOperationType} that the service accepts. */
export enum KnownPhoneNumberOperationType {
  Purchase = "purchase",
  ReleasePhoneNumber = "releasePhoneNumber",
  Search = "search",
  UpdatePhoneNumberCapabilities = "updatePhoneNumberCapabilities"
}

/**
 * Defines values for PhoneNumberOperationType. \
 * {@link KnownPhoneNumberOperationType} can be used interchangeably with PhoneNumberOperationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **purchase** \
 * **releasePhoneNumber** \
 * **search** \
 * **updatePhoneNumberCapabilities**
 */
export type PhoneNumberOperationType = string;

/** Known values of {@link PhoneNumberOperationStatus} that the service accepts. */
export enum KnownPhoneNumberOperationStatus {
  NotStarted = "notStarted",
  Running = "running",
  Succeeded = "succeeded",
  Failed = "failed"
}

/**
 * Defines values for PhoneNumberOperationStatus. \
 * {@link KnownPhoneNumberOperationStatus} can be used interchangeably with PhoneNumberOperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **notStarted** \
 * **running** \
 * **succeeded** \
 * **failed**
 */
export type PhoneNumberOperationStatus = string;

/** Known values of {@link NumberType} that the service accepts. */
export enum KnownNumberType {
  ShortCode = "shortCode",
  AlphaId = "alphaId"
}

/**
 * Defines values for NumberType. \
 * {@link KnownNumberType} can be used interchangeably with NumberType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **shortCode** \
 * **alphaId**
 */
export type NumberType = string;

/** Known values of {@link ProgramBriefStatus} that the service accepts. */
export enum KnownProgramBriefStatus {
  Submitted = "submitted",
  Approved = "approved",
  SubmitNewVanityNumbers = "submitNewVanityNumbers",
  UpdateProgramBrief = "updateProgramBrief",
  Draft = "draft"
}

/**
 * Defines values for ProgramBriefStatus. \
 * {@link KnownProgramBriefStatus} can be used interchangeably with ProgramBriefStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **submitted** \
 * **approved** \
 * **submitNewVanityNumbers** \
 * **updateProgramBrief** \
 * **draft**
 */
export type ProgramBriefStatus = string;

/** Known values of {@link ProgramSignUpType} that the service accepts. */
export enum KnownProgramSignUpType {
  Website = "website",
  PointOfSale = "pointOfSale",
  Sms = "sms"
}

/**
 * Defines values for ProgramSignUpType. \
 * {@link KnownProgramSignUpType} can be used interchangeably with ProgramSignUpType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **website** \
 * **pointOfSale** \
 * **sms**
 */
export type ProgramSignUpType = string;

/** Known values of {@link MessageType} that the service accepts. */
export enum KnownMessageType {
  Sms = "sms",
  Mms = "mms"
}

/**
 * Defines values for MessageType. \
 * {@link KnownMessageType} can be used interchangeably with MessageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **sms** \
 * **mms**
 */
export type MessageType = string;

/** Known values of {@link Recurrence} that the service accepts. */
export enum KnownRecurrence {
  Subscription = "subscription",
  Transaction = "transaction"
}

/**
 * Defines values for Recurrence. \
 * {@link KnownRecurrence} can be used interchangeably with Recurrence,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **subscription** \
 * **transaction**
 */
export type Recurrence = string;

/** Known values of {@link ContentType} that the service accepts. */
export enum KnownContentType {
  RingTones = "ringTones",
  SmsChat = "smsChat",
  Video = "video",
  LoyaltyProgramPointsPrizes = "loyaltyProgramPointsPrizes",
  Gifting = "gifting",
  InApplicationBilling = "inApplicationBilling",
  TextToScreen = "textToScreen",
  Games = "games",
  AudioChat = "audioChat",
  MmsPictures = "mmsPictures",
  SweepstakesContestAuction = "sweepstakesContestAuction",
  FinancialBanking = "financialBanking",
  PremiumWap = "premiumWap",
  QueryService = "queryService",
  WallpaperScreensaver = "wallpaperScreensaver",
  Voting = "voting",
  Application = "application",
  MobileGivingDonations = "mobileGivingDonations",
  Coupons = "coupons",
  LoyaltyProgram = "loyaltyProgram",
  NoPointPrizes = "noPointPrizes",
  InformationAlerts = "informationAlerts",
  MicroBilling = "microBilling",
  Trivia = "trivia",
  EntertainmentAlerts = "entertainmentAlerts",
  Other = "other"
}

/**
 * Defines values for ContentType. \
 * {@link KnownContentType} can be used interchangeably with ContentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ringTones** \
 * **smsChat** \
 * **video** \
 * **loyaltyProgramPointsPrizes** \
 * **gifting** \
 * **inApplicationBilling** \
 * **textToScreen** \
 * **games** \
 * **audioChat** \
 * **mmsPictures** \
 * **sweepstakesContestAuction** \
 * **financialBanking** \
 * **premiumWap** \
 * **queryService** \
 * **wallpaperScreensaver** \
 * **voting** \
 * **application** \
 * **mobileGivingDonations** \
 * **coupons** \
 * **loyaltyProgram** \
 * **noPointPrizes** \
 * **informationAlerts** \
 * **microBilling** \
 * **trivia** \
 * **entertainmentAlerts** \
 * **other**
 */
export type ContentType = string;

/** Optional parameters. */
export interface PhoneNumbersSearchAvailablePhoneNumbersOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the searchAvailablePhoneNumbers operation. */
export type PhoneNumbersSearchAvailablePhoneNumbersResponse = PhoneNumbersSearchAvailablePhoneNumbersHeaders &
  PhoneNumberSearchResult;

/** Optional parameters. */
export interface PhoneNumbersGetSearchResultOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSearchResult operation. */
export type PhoneNumbersGetSearchResultResponse = PhoneNumberSearchResult;

/** Optional parameters. */
export interface PhoneNumbersPurchasePhoneNumbersOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the purchasePhoneNumbers operation. */
export type PhoneNumbersPurchasePhoneNumbersResponse = PhoneNumbersPurchasePhoneNumbersHeaders;

/** Optional parameters. */
export interface PhoneNumbersGetOperationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperation operation. */
export type PhoneNumbersGetOperationResponse = PhoneNumbersGetOperationHeaders &
  PhoneNumberOperation;

/** Optional parameters. */
export interface PhoneNumbersCancelOperationOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PhoneNumbersUpdateCapabilitiesOptionalParams
  extends coreClient.OperationOptions {
  /** Defines the update capabilities request. */
  body?: PhoneNumberCapabilitiesRequest;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateCapabilities operation. */
export type PhoneNumbersUpdateCapabilitiesResponse = PhoneNumbersUpdateCapabilitiesHeaders &
  PurchasedPhoneNumber;

/** Optional parameters. */
export interface PhoneNumbersGetByNumberOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByNumber operation. */
export type PhoneNumbersGetByNumberResponse = PurchasedPhoneNumber;

/** Optional parameters. */
export interface PhoneNumbersReleasePhoneNumberOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the releasePhoneNumber operation. */
export type PhoneNumbersReleasePhoneNumberResponse = PhoneNumbersReleasePhoneNumberHeaders;

/** Optional parameters. */
export interface PhoneNumbersListPhoneNumbersOptionalParams
  extends coreClient.OperationOptions {
  /** An optional parameter for how many entries to skip, for pagination purposes. The default value is 0. */
  skip?: number;
  /** An optional parameter for how many entries to return, for pagination purposes. The default value is 100. */
  top?: number;
}

/** Contains response data for the listPhoneNumbers operation. */
export type PhoneNumbersListPhoneNumbersResponse = PurchasedPhoneNumbers;

/** Optional parameters. */
export interface PhoneNumbersListPhoneNumbersNextOptionalParams
  extends coreClient.OperationOptions {
  /** An optional parameter for how many entries to skip, for pagination purposes. The default value is 0. */
  skip?: number;
  /** An optional parameter for how many entries to return, for pagination purposes. The default value is 100. */
  top?: number;
}

/** Contains response data for the listPhoneNumbersNext operation. */
export type PhoneNumbersListPhoneNumbersNextResponse = PurchasedPhoneNumbers;

/** Optional parameters. */
export interface ShortCodesGetShortCodesOptionalParams
  extends coreClient.OperationOptions {
  /** An optional parameter for how many entries to skip, for pagination purposes. */
  skip?: number;
  /** An optional parameter for how many entries to return, for pagination purposes. */
  take?: number;
}

/** Contains response data for the getShortCodes operation. */
export type ShortCodesGetShortCodesResponse = ShortCodeEntities;

/** Optional parameters. */
export interface ShortCodesUpsertUSProgramBriefOptionalParams
  extends coreClient.OperationOptions {
  /** Data to create new a Program Brief or fields to update an existing Program Brief */
  body?: ProgramBriefEntity;
}

/** Contains response data for the upsertUSProgramBrief operation. */
export type ShortCodesUpsertUSProgramBriefResponse = ProgramBriefEntity;

/** Optional parameters. */
export interface ShortCodesDeleteUSProgramBriefOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ShortCodesGetUSProgramBriefOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getUSProgramBrief operation. */
export type ShortCodesGetUSProgramBriefResponse = ProgramBriefEntity;

/** Optional parameters. */
export interface ShortCodesSubmitUSProgramBriefOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the submitUSProgramBrief operation. */
export type ShortCodesSubmitUSProgramBriefResponse = ProgramBriefEntity;

/** Optional parameters. */
export interface ShortCodesGetUSProgramBriefsOptionalParams
  extends coreClient.OperationOptions {
  /** An optional parameter for how many entries to skip, for pagination purposes. */
  skip?: number;
  /** An optional parameter for how many entries to return, for pagination purposes. */
  take?: number;
}

/** Contains response data for the getUSProgramBriefs operation. */
export type ShortCodesGetUSProgramBriefsResponse = ProgramBriefEntities;

/** Optional parameters. */
export interface ShortCodesGetShortCodesNextOptionalParams
  extends coreClient.OperationOptions {
  /** An optional parameter for how many entries to skip, for pagination purposes. */
  skip?: number;
  /** An optional parameter for how many entries to return, for pagination purposes. */
  take?: number;
}

/** Contains response data for the getShortCodesNext operation. */
export type ShortCodesGetShortCodesNextResponse = ShortCodeEntities;

/** Optional parameters. */
export interface ShortCodesGetUSProgramBriefsNextOptionalParams
  extends coreClient.OperationOptions {
  /** An optional parameter for how many entries to skip, for pagination purposes. */
  skip?: number;
  /** An optional parameter for how many entries to return, for pagination purposes. */
  take?: number;
}

/** Contains response data for the getUSProgramBriefsNext operation. */
export type ShortCodesGetUSProgramBriefsNextResponse = ProgramBriefEntities;

/** Optional parameters. */
export interface PhoneNumbersClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
